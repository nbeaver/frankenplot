#!/usr/bin/env python

# Name: frankenplot
# Purpose: Quick 'n dirty plotting of MRCAT XRF mapping data
# Author: Ken McIvor <mcivor@iit.edu>
#
# Copyright 2006-2009 Illinois Institute of Technology
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL ILLINOIS INSTITUTE OF TECHNOLOGY BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the name of Illinois Institute
# of Technology shall not be used in advertising or otherwise to promote
# the sale, use or other dealings in this Software without prior written
# authorization from Illinois Institute of Technology.

# ChangeLog
#
# 12-06-2006  Ken McIvor <mcivor@iit.edu>
#  * Release 1.0
#
# 02-21-2007  Ken McIvor <mcivor@iit.edu>
#  * Release 1.1
#  * Matplotlib 0.87.7 compatability fixes
#
# 04-15-2007  Ken McIvor <mcivor@iit.edu>
#  * Release 1.2
#  * Incorporated Bruce Ravel's patch, adding an "-m" option for specifying
#    the color map
#
# 03-06-2008  Ken McIvor <mcivor@iit.edu>
#  * Release 1.3
#  * Reverted to the pre-0.81 axes formatters
#    the color map
#
# 02-20-2008  Ken McIvor <mcivor@iit.edu>
#  * Release 1.4
#  * WxMpl is now imported before matplotlib to avoid the warning "This call
#    to matplotlib.use() has no effect because the the backend has already
#    been chosen"


import optparse
import sys

import gui

__version__ = '1.3'

def parse_arguments(args):
    # matplotlib's color maps
    colormaps = ['autumn', 'bone', 'cool', 'copper', 'flag', 'gray', 'hot',
        'hsv', 'pink', 'prism', 'spring', 'summer', 'winter']

    USAGE = '%prog [OPTIONS...] FILE [ROI-NUMBER]'
    VERSION = '%prog ' + __version__ + ', by Ken McIvor <mcivor@iit.edu>'
    parser = optparse.OptionParser(usage=USAGE, version=VERSION)

    parser.add_option('-i',
        action='store', type='string', dest='zName',
        help='z-axis column name (legacy option; see -z for more details)', metavar='N')

    parser.add_option('-x',
        action='store', type='string', dest='xName', default='sam_hor',
        help='x-axis column name ("sam_hor" is default)', metavar='N')

    parser.add_option('-y',
        action='store', type='string', dest='yName', default='sam_vert',
        help='y-axis column name ("sam_vert" is default)', metavar='N')

    parser.add_option('-z',
        action='store', type='string', dest='zName', default='Io',
        help='z-axis column name ("Io" is default)', metavar='N')

    # FIXME move to Edit -> Preferences
    parser.add_option('-n',
        action='store_false', dest='normalize', default=True,
        help='disable Io normalization')

    parser.add_option('-m',
        action='store', dest='colormap', default='hot',
        help=('color map (%s)' % ', '.join(colormaps)), metavar='C')

    opts, args = parser.parse_args(args)
    if not 0 < len(args) < 3:
        parser.print_usage()
        sys.exit(1)

    fileName  = args[0]
    roiNumber = 0
    if len(args) == 2:
        try:
            roiNumber = int(args[1])
        except ValueError:
            fatal_error('invalid ROI number "%s"', repr(args[1])[1:-1])

        if roiNumber < 0:
            fatal_error('invalid ROI number "%s"', repr(args[1])[1:-1])

    cm = opts.colormap.lower()
    if cm not in colormaps:
        fatal_error('invalid color map "%s"', opts.colormap)
    else:
        opts.colormap = cm

    return opts, (fileName, roiNumber)

if __name__ == '__main__':
    try:
        opts, args = parse_arguments(sys.argv[1:])
        filename, roi_number = args

        app = gui.PlotApp(filename=filename) 
        app.plot(x_name=opts.xName, y_name=opts.yName, z_name=opts.zName,
                 normalize=opts.normalize, colormap=opts.colormap,
                 roi_number=roi_number)

        app.MainLoop()
    except KeyboardInterrupt:
        pass
